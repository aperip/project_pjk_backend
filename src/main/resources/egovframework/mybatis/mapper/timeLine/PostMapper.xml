<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="egovframework.thread.post.repository.PostRepository">
       
	<resultMap id="postResultMap" type="egovframework.thread.post.entity.Post">
	    <result property="postSeq" column="POST_SEQ"/>
	    <result property="postNo" column="POST_NO"/>
	    <result property="postType" column="POST_TYPE"/>
	    <result property="postTitle" column="POST_TITLE"/>
	    <result property="postContents" column="POST_CONTENTS"/>
	    <result property="createId" column="CREATE_ID"/>
	    <result property="createDate" column="CREATE_DATE"/>
	    <result property="updateId" column="UPDATE_ID"/>
	    <result property="updateDate" column="UPDATE_DATE"/>
	    <result property="hasLike" column="HAS_LIKE"/>
	    <result property="hasComment" column="HAS_COMMENT"/>
	    <result property="hasQuote" column="HAS_QUOTE"/>
	</resultMap>
	
	<resultMap id="postEtcResultMap" type="egovframework.thread.post.entity.PostEtc">
		<result property="postEtcSeq" column="POST_ETC_SEQ"/>
		<result property="postSeq" column="POST_SEQ"/>
		<result property="userId" column="USER_ID"/>
		<result property="likeCnt" column="LIKE_CNT"/>
		<result property="commentCnt" column="COMMENT_CNT"/>
		<result property="quoteCnt" column="QUOTE_CNT"/>
		<result property="createDate" column="CREATE_DATE"/>
	</resultMap>

    <select id="getPostsAll" resultMap="postResultMap">
		SELECT 
		    P.POST_SEQ,
		    P.POST_NO,
		    P.POST_TYPE,
		    P.POST_TITLE,
		    P.POST_CONTENTS,
		    P.CREATE_ID,
		    P.CREATE_DATE,
		    P.UPDATE_ID,
		    P.UPDATE_DATE,
		    CASE WHEN PE.LIKE_CNT > 0 THEN '1' ELSE '0' END AS HAS_LIKE,
		    CASE WHEN PE.COMMENT_CNT > 0 THEN '1' ELSE '0' END AS HAS_COMMENT,
		    CASE WHEN PE.QUOTE_CNT > 0 THEN '1' ELSE '0' END AS HAS_QUOTE
		FROM PJK_POST P
		LEFT JOIN PJK_POST_ETC PE 
		    ON P.POST_SEQ = PE.POST_SEQ
		   AND PE.USER_ID = #{userId}
		ORDER BY P.POST_SEQ DESC, P.CREATE_DATE DESC
		LIMIT #{limit} OFFSET #{offset}
    </select>
    
    <select id="getMyPostsAll" resultMap="postResultMap">
		SELECT 
		    P.POST_SEQ,
		    P.POST_NO,
		    P.POST_TYPE,
		    P.POST_TITLE,
		    P.POST_CONTENTS,
		    P.CREATE_ID,
		    P.CREATE_DATE,
		    P.UPDATE_ID,
		    P.UPDATE_DATE,
		    CASE WHEN PE.LIKE_CNT > 0 THEN '1' ELSE '0' END AS HAS_LIKE,
		    CASE WHEN PE.COMMENT_CNT > 0 THEN '1' ELSE '0' END AS HAS_COMMENT,
		    CASE WHEN PE.QUOTE_CNT > 0 THEN '1' ELSE '0' END AS HAS_QUOTE
		FROM PJK_POST P
		LEFT JOIN PJK_POST_ETC PE 
		    ON P.POST_SEQ = PE.POST_SEQ
		   AND PE.USER_ID = #{userId}
		WHERE CREATE_ID = #{userId}
		ORDER BY P.POST_SEQ DESC, P.CREATE_DATE DESC
		LIMIT #{limit} OFFSET #{offset}
    </select>
    
    <select id="getPostEtc" resultMap="postEtcResultMap">
		SELECT 
		    A.POST_SEQ,
		    SUM(A.LIKE_CNT) AS LIKE_CNT,
		    SUM(A.QUOTE_CNT) AS QUOTE_CNT
		FROM 
		    PJK_POST_ETC A
		where POST_SEQ =#{postSeq}  
    </select>
    
   <insert id="increaseLike">
	    INSERT INTO pjk_post_etc (POST_SEQ, USER_ID, LIKE_CNT)
	    VALUES (#{postSeq}, #{userId}, 1)
	    ON DUPLICATE KEY UPDATE LIKE_CNT = LIKE_CNT + 1
	</insert>
	
	<insert id="increaseQuote">
	    INSERT INTO pjk_post_etc (POST_SEQ, USER_ID, QUOTE_CNT)
	    VALUES (#{postSeq}, #{userId}, 1)
	    ON DUPLICATE KEY UPDATE QUOTE_CNT = QUOTE_CNT + 1
	</insert>
	
	<update id="decreaseLike">
	    UPDATE pjk_post_etc
	    SET LIKE_CNT = 0
	    WHERE POST_SEQ = #{postSeq} AND USER_ID = #{userId}
	</update>
	
	<update id="decreaseQuote">
	    UPDATE pjk_post_etc
	    SET QUOTE_CNT = 0
	    WHERE POST_SEQ = #{postSeq} AND USER_ID = #{userId}
	</update>
	

    
    
    
</mapper>